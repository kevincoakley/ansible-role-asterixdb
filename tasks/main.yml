---
- name: Include OS family specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create the asterixdb group
  group:
    name: asterixdb
    state: present
    system: yes

- name: Create the asterixdb user
  user:
    name: asterixdb
    groups: asterixdb
    append: yes
    shell: /bin/bash

#
# You must run files/ssh/make_ssh_key.sh before running this role
#
- name: Add the generated authorized_key to the asterixdb user
  authorized_key:
    user: asterixdb
    key: "{{ item }}"
  with_file: "{{ role_path }}/files/ssh/id_rsa.pub"

- name: Copy the generated SSH private key to the asterixdb home directory
  copy:
    src: "{{ role_path }}/files/ssh/id_rsa"
    dest: /home/asterixdb/.ssh/id_rsa
    owner: asterixdb
    group: asterixdb
    mode: 0400

- name: Copy the SSH config to the asterixdb home directory
  copy:
    src: "{{ role_path }}/files/ssh/ssh_config"
    dest: /home/asterixdb/.ssh/config
    owner: asterixdb
    group: asterixdb
    mode: 0400

- name: Download and install the required packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ asterixdb_packages }}"

#
# Create the AsterixDB data directory tree
#
- name: Create the AsterixDB iodevices directory
  file:
    path: "{{ asterixdb_iodevices }}/{{ inventory_hostname }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB txn.log.dir directory
  file:
    path: "{{ asterixdb_iodevices }}/{{ inventory_hostname }}/{{ asterixdb_txn_log_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB core.dump.dir directory
  file:
    path: "{{ asterixdb_iodevices }}/{{ inventory_hostname }}/{{ asterixdb_core_dump_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

#
# Set the open file limit to 40000
#
- name: Set the open files soft limits in /etc/security/limits.conf
  lineinfile:
    dest: /etc/security/limits.conf
    line: "*           soft    nofile          40000"
    insertbefore: "# End of file"
    state: present

- name: Set the open files hard limits in /etc/security/limits.conf
  lineinfile:
    dest: /etc/security/limits.conf
    line: "*           hard    nofile          40000"
    insertbefore: "# End of file"
    state: present

- name: Ensure pam_limits.so is enabled
  lineinfile:
    dest: /etc/pam.d/su
    regexp: "^(# )?session    required   pam_limits.so"
    line: "session    required   pam_limits.so"
    state: present

#
# Install AsterixDB
#
- name: Check if the version of AsterixDB already exists
  stat: path=/opt/asterixdb-{{ asterixdb_version }}
  register: asterixdb_install_path

- name: Download AsterixDB
  get_url:
    url: "{{ asterixdb_download_url }}"
    dest: "/tmp/asterix-server-{{ asterixdb_version }}.zip"
  when: asterixdb_install_path.stat.exists == False

- name: Create the AsterixDB install directory in /opt/
  file:
    path: "/opt/asterixdb-{{ asterixdb_version }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755
  when: asterixdb_install_path.stat.exists == False

- name: Extract AsterixDB into the install directory
  unarchive:
    src: "/tmp/asterix-server-{{ asterixdb_version }}.zip"
    dest: "/opt/asterixdb-{{ asterixdb_version }}"
    copy: no
    owner: asterixdb
    group: asterixdb
  when: asterixdb_install_path.stat.exists == False

- name: Create a symlink for /opt/asterixdb
  file:
    src: "/opt/asterixdb-{{ asterixdb_version }}"
    dest: /opt/asterixdb
    owner: asterixdb
    group: asterixdb
    state: link
  when: asterixdb_install_path.stat.exists == False

- name: Create the cluster config file 
  template:
    src: cc.conf.j2
    dest: /opt/asterixdb/cc.conf
    owner: asterixdb
    group: asterixdb
    mode: 0644

- name: Copy the NC systemd service file
  template:
    src: asterixdb-nc.service.j2
    dest: /etc/systemd/system/asterixdb-nc.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart asterixdb-nc

- name: Copy the CC systemd service file
  template:
    src: asterixdb-cc.service.j2
    dest: /etc/systemd/system/asterixdb-cc.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart asterixdb-cc
  when: asterixdb_cluster == False or asterixdb_master == True

- name: Ensure NC service is started and enabled on boot
  service:
    name: asterixdb-nc
    state: started
    enabled: yes

- name: Ensure CC service is started and enabled on boot
  service:
    name: asterixdb-cc
    state: started
    enabled: yes
  when: asterixdb_cluster == False or asterixdb_master == True
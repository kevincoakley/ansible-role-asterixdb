---
- name: Include OS family specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create the asterixdb group
  group:
    name: asterixdb
    state: present
    system: yes

- name: Create the asterixdb user
  user:
    name: asterixdb
    groups: asterixdb
    append: yes
    shell: /bin/bash

#
# You must run files/ssh/make_ssh_key.sh before running this role
#
- name: Add the generated authorized_key to the asterixdb user
  authorized_key:
    user: asterixdb
    key: "{{ item }}"
  with_file: "{{ role_path }}/files/ssh/id_rsa.pub"

- name: Copy the generated SSH private key to the asterixdb home directory
  copy:
    src: "{{ role_path }}/files/ssh/id_rsa"
    dest: /home/asterixdb/.ssh/id_rsa
    owner: asterixdb
    group: asterixdb
    mode: 0400

- name: Copy the SSH config to the asterixdb home directory
  copy:
    src: "{{ role_path }}/files/ssh/ssh_config"
    dest: /home/asterixdb/.ssh/config
    owner: asterixdb
    group: asterixdb
    mode: 0400

- name: Download and install the required packages (yum)
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ asterixdb_packages }}"
  when: ansible_os_family == "RedHat"

- name: Download and install the required packages (apt)
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ asterixdb_packages }}"
  when: ansible_os_family == "Debian"

#
# Create the AsterixDB data directory tree
#
- name: Create the AsterixDB data directory
  file:
    path: "{{ asterixdb_data_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB working directory
  file:
    path: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_working_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB logs directory
  file:
    path: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_logs_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB transaction logs directory
  file:
    path: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_txn_logs }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB iodevices directory
  file:
    path: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_iodevices }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the AsterixDB backup directory
  file:
    path: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_backup_dir }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

#
# Set the open file limit to 40000
#
- name: Set the open files soft limits in /etc/security/limits.conf
  lineinfile:
    dest: /etc/security/limits.conf
    line: "*           soft    nofile          40000"
    insertbefore: "# End of file"
    state: present

- name: Set the open files hard limits in /etc/security/limits.conf
  lineinfile:
    dest: /etc/security/limits.conf
    line: "*           hard    nofile          40000"
    insertbefore: "# End of file"
    state: present

- name: Ensure pam_limits.so is enabled
  lineinfile:
    dest: /etc/pam.d/su
    regexp: "^(# )?session    required   pam_limits.so"
    line: "session    required   pam_limits.so"
    state: present

#
# Install NFS if AsterixDB is clustered
#
- include: nfs-master.yml
  when: asterixdb_cluster == True and asterixdb_master == True

- include: nfs-client.yml
  when: asterixdb_cluster == True and asterixdb_master == False

#
# Install AsterixDB
#
- name: Check if the version of AsterixDB already exists
  stat: path=/opt/asterixdb-{{ asterixdb_version }}
  register: asterixdb_install_path

- name: Download AsterixDB
  get_url:
    url: "{{ asterixdb_download_url }}"
    dest: "/tmp/asterix-installer-{{ asterixdb_version }}.zip"
  when: asterixdb_install_path.stat.exists == False

- name: Create the AsterixDB install directory in /opt/
  file:
    path: "/opt/asterixdb-{{ asterixdb_version }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755
  when: asterixdb_install_path.stat.exists == False

- name: Extract AsterixDB into the install directory
  unarchive:
    src: "/tmp/asterix-installer-{{ asterixdb_version }}.zip"
    dest: "/opt/asterixdb-{{ asterixdb_version }}"
    copy: no
    owner: asterixdb
    group: asterixdb
  when: asterixdb_install_path.stat.exists == False

- name: Create a symlink for /opt/asterixdb
  file:
    src: "/opt/asterixdb-{{ asterixdb_version }}"
    dest: /opt/asterixdb
    owner: asterixdb
    group: asterixdb
    state: link
  when: asterixdb_install_path.stat.exists == False

- name: Create the cluster config dir
  file:
    path: "/opt/asterixdb/clusters/{{ asterixdb_instance_name }}"
    state: directory
    owner: asterixdb
    group: asterixdb
    mode: 0755

- name: Create the cluster config file 
  template:
    src: asterixdb/cluster.xml.j2
    dest: "/opt/asterixdb/clusters/{{ asterixdb_instance_name }}/{{ asterixdb_instance_name }}.xml"
    owner: asterixdb
    group: asterixdb
    mode: 0644

- name: Create the Managix config file
  template:
    src: asterixdb/managix-conf.xml.j2
    dest: /opt/asterixdb/conf/managix-conf.xml
    owner: asterixdb
    group: asterixdb
    mode: 0644

- name: Test the Managix config
  shell: "/opt/asterixdb/bin/managix validate -c /opt/asterixdb/clusters/{{ asterixdb_instance_name }}/{{ asterixdb_instance_name }}.xml"
  args:
    executable: /bin/bash
  register: asterixdb_managix_config_status
  become_user: asterixdb
  become_method: sudo
  failed_when: "'ERROR' in asterixdb_managix_config_status.stdout"
  changed_when: False

- name: Create the AsterixDB cluster instance
  shell: /opt/asterixdb/bin/managix create -n {{ asterixdb_instance_name }} -c /opt/asterixdb/clusters/{{ asterixdb_instance_name }}/{{ asterixdb_instance_name }}.xml
  args:
    creates: "{{ asterixdb_data_dir }}{{ asterixdb_instance_name }}/{{ asterixdb_working_dir }}/configuration.xml"
    executable: /bin/bash
  register: asterixdb_create_cluster_status
  when: asterixdb_cluster == False or asterixdb_master == True
  become_user: asterixdb
  become_method: sudo
  failed_when: "('State:ACTIVE' not in asterixdb_create_cluster_status.stdout) and ('skipped' not in asterixdb_create_cluster_status.stdout)"
